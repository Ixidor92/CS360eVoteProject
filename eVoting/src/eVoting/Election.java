package eVoting;

import java.util.Scanner;
import java.awt.BorderLayout;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.JButton;
import javax.swing.JTextField;
import javax.swing.JPasswordField;
import java.awt.event.ItemListener;
import java.sql.SQLException;
import java.awt.event.ItemEvent;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

public class Election extends JFrame {

	private JPanel contentPane;
	private JTextField txtUsername;
	private JPasswordField electoratePassword;
	private static boolean currentlyRunning;
	private static boolean isOver;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			
			public void run() {
				try {
					Election frame = new Election();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public Election() {
		
		//create sql connection
		String user = "root";
		String password = "Scampers9/2";
		String server = "localhost";
		int port = 3306;
		String DB = "evote";
		currentlyRunning = false;		//currentlyRunning defaults to false
		isOver = false;					//this will be set to true ONLY when the election is ready to be ended for good
		
		SqlConnector connection = new SqlConnector(user, password, server, port, DB);	//controls all sql work
		ElectorateCommittee committee = new ElectorateCommittee(connection);			//committee that controls committee options
		
		//auto generated by WindowBuilder
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 639, 259);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		//-----------------------------------
		
		JLabel lblClickvoteTo = new JLabel("Click \"Vote\" to start the voting Process");
		
		JLabel lblIfYouAre = new JLabel("If you are a member of the electorate committee, please enter your username and password for options");
		
		JLabel lblIfvoteIs = new JLabel("If \"Vote\" is not availalable, the election has not yet started or is halted");
		
		JButton btnVote = new JButton("Vote");
		btnVote.setEnabled(false); 		//by default, the vote button is disabled.  It must be enabled by a committee member
		
		txtUsername = new JTextField();
		txtUsername.setColumns(10);
		
		electoratePassword = new JPasswordField();
		
		JLabel lblUsername = new JLabel("Username:");
		
		JLabel lblPassword = new JLabel("Password:");
		
		//controls login of a committee member
		JButton btnLogin = new JButton("Login");
		btnLogin.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
			{
				//optain the username and passwords from the given fields
				String username = txtUsername.getText();
				char[] entryPass = new char[30];
				entryPass = electoratePassword.getPassword();
				String password = new String(entryPass);
				
				try 
				{
					boolean successful = committee.login(username, password);
					if(successful)
					{
						Scanner scanner = new Scanner(System.in);
						while(!committeeOptions(scanner, committee));
					}
				}
				catch (SQLException e1) 
				{
					JOptionPane.showMessageDialog(contentPane, "There was a problem with the database, please ask for assistance."); 
				}
			}
		});
		
		//Code below controls layout of the window
		//All code below has been auto-generated by the WindowBuilder plugin
		//----------------------------------------------------------------------------------------------------------------------
		GroupLayout gl_contentPane = new GroupLayout(contentPane);
		gl_contentPane.setHorizontalGroup(
			gl_contentPane.createParallelGroup(Alignment.TRAILING)
				.addGroup(gl_contentPane.createSequentialGroup()
					.addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING)
						.addComponent(lblIfYouAre)
						.addComponent(lblClickvoteTo)
						.addGroup(gl_contentPane.createSequentialGroup()
							.addContainerGap()
							.addComponent(lblIfvoteIs)))
					.addContainerGap(13, Short.MAX_VALUE))
				.addGroup(gl_contentPane.createSequentialGroup()
					.addContainerGap()
					.addGroup(gl_contentPane.createParallelGroup(Alignment.TRAILING)
						.addComponent(btnLogin)
						.addComponent(lblPassword)
						.addGroup(gl_contentPane.createSequentialGroup()
							.addComponent(btnVote)
							.addGap(301)
							.addComponent(lblUsername)))
					.addGap(7)
					.addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING, false)
						.addGroup(gl_contentPane.createSequentialGroup()
							.addGap(6)
							.addComponent(electoratePassword))
						.addComponent(txtUsername, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 143, GroupLayout.PREFERRED_SIZE))
					.addContainerGap())
		);
		gl_contentPane.setVerticalGroup(
			gl_contentPane.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_contentPane.createSequentialGroup()
					.addContainerGap()
					.addComponent(lblClickvoteTo)
					.addGap(11)
					.addComponent(lblIfYouAre)
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addComponent(lblIfvoteIs)
					.addGap(18)
					.addGroup(gl_contentPane.createParallelGroup(Alignment.BASELINE)
						.addComponent(txtUsername, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(lblUsername)
						.addComponent(btnVote))
					.addGap(18)
					.addGroup(gl_contentPane.createParallelGroup(Alignment.BASELINE)
						.addComponent(lblPassword)
						.addComponent(electoratePassword, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(btnLogin)
					.addContainerGap(57, Short.MAX_VALUE))
		);
		contentPane.setLayout(gl_contentPane);
		//above code is auto-generated
		//-----------------------------------------------------------------------------------------------------------------------------------
	}
	
	private static boolean committeeOptions(Scanner input, ElectorateCommittee electorate)
	{
		boolean finished = false;	//notes whether the user is finished or not
		
		//print out the prompts for the committee member
		System.out.println(); 		//for readability
		System.out.println("Please select one of the following options:");
		System.out.println("1: Start election");
		System.out.println("2: Halt election");
		System.out.println("3: view current standings");
		System.out.println("4: leave this menu and let another user interact with the system.");
		System.out.println("5: End election WARNING: this will stop the election for good and finalize results.");
		
		String selection = input.next();	//take the selection from the user
		
		//do the appropriate action based on the user's input
		if(selection.equals("1"))
		{
			currentlyRunning = true;	//election is now allowing ballots to be cast
			System.out.println("Election has now started!");
		}
		else if(selection.equals("2"))
		{
			currentlyRunning = false;	//election is halted, no ballots may be cast
			System.out.println("Election Halted.");
		}
		else if(selection.equals("3"))
		{
			//if the election is not currently running, results can be viewed
			if(!currentlyRunning)
			{
				try 
				{
					electorate.viewResults();
				} 
				catch (SQLException e) 
				{//print out a simple error message if there is a sql error.  There should be no chance of this, assuming proper database integration
					System.out.println("Faulty SQL command");
					System.out.println(e);
				}
			}
			else
			{//if the election is running, then let the user know results cannot be seen until halted
				System.out.println("Election is currently running, results cannot be viewed.");
				System.out.println("If you wish to view the election results, please halt the election and retry.");
			}
		}
		else if(selection.equals("4"))
		{
			//This command leaves the menu.  If the election is currently halted, the user will be given a warning that voters cannot
			//use the system and ask for confirmation.
			if(!currentlyRunning)
			{
				System.out.println("WARNING: The election is currently halted, and voters will not be able to cast ballots.  " +
						"Do you wish to continue? y/n");
				String yesNo = input.next();
				if(yesNo.equals("y"))
				{//if they have confirmed, then continue, noting that the election is currently halted
					System.out.println("Returning to main menu...");
					System.out.println("Election is currently halted.");
					finished = true;
				}
				else
				{
					System.out.println("Returning to command menu...");
				}
			}
			else
			{//if the election is not halted, the user is taken to the previous menu with no issues
				System.out.println("Returning to main menu...");
				System.out.println("Election is running, voters may cast ballots.");
				finished = true;
			}
		}
		else if(selection.equals("5"))
		{
			//This option ends the election for good and gives the results
			//this option can only be selected if the election is already halted
			if(currentlyRunning)
			{
				System.out.println("The election is currently running, and cannot be ended.  Please halt the election first.");
			}
			//the user will be prompted to be sure this is what they want, assuming the election is halted
			else
			{
				System.out.println("You have selected to end the election.  WARNING: the election will be stopped after this, and " +
						"additional ballots may not be cast once it is finished.  Do you wish to continue? y/n");
				String yesNo = input.next();
				
				if(yesNo.equals("y"))
				{
					System.out.println("Ending election...");
					isOver = true;		//election is over now
					finished = true;	//user is done with the system
				}
				else
				{//default to the election NOT ending
					System.out.println("Returning to command menu...");
				}
			}
			
		}
		else
		{
			System.out.println("The entry " + selection + " is not a valid entry.  Please try again.");
		}
		return finished;
	}
}


